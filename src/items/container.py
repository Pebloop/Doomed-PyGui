from typing import Union, List, Tuple, Optional, Any, Callable

from src.image import Image
from src.items.buttons.button_text import ButtonText
from src.items.buttons.button_colomap import ButtonColormap
from src.items.buttons.button_color import ButtonColor
from src.items.buttons.button_image import ButtonImage
from src.items.buttons.button_radio import ButtonRadio
from src.items.checkbox import Checkbox
from src.items.date_picker import DatePicker
from src.items.inputs.input_field_double import InputFieldDouble
from src.items.inputs.input_field_double_x import InputFieldDoubleX
from src.items.inputs.input_field_float import InputFieldFloat
from src.items.inputs.input_field_float_x import InputFieldFloatX
from src.items.inputs.input_field_int import InputFieldInt
from src.items.inputs.input_field_int_x import InputFieldIntX
from src.items.inputs.input_field_text import InputFieldText
from src.items.items import Item

from src.items.separator import Separator
from src.items.sliders.slider_3d import Slider3D
from src.items.sliders.slider_colormap import SliderColormap
from src.items.sliders.slider_double import SliderDouble
from src.items.sliders.slider_double_x import SliderDoubleX
from src.items.sliders.slider_float import SliderFloat
from src.items.sliders.slider_float_x import SliderFloatX
from src.items.sliders.slider_int import SliderInt
from src.items.sliders.slider_int_x import SliderIntX
from src.items.text import Text
from src.items.tippable_item import TippableItem


class Container(TippableItem):
    items: List[Item] = []

    def add_item(self, item: Item):
        self.items.append(item)
        return item

    def add_text(self,
                 *,
                 default_value: str = '',
                 label: Optional[str] = None,
                 user_data: Optional[Any] = None,
                 use_internal_label: bool = True,
                 tag: Union[int, str] = 0,
                 indent: int = -1,
                 before: Union[int, str] = 0,
                 source: Union[int, str] = 0,
                 payload_type: str = '$$DPG_PAYLOAD',
                 drag_callback: Optional[Callable] = None,
                 drop_callback: Optional[Callable] = None,
                 show: bool = True,
                 pos: Union[List[int], Tuple[int, ...]] = [],
                 filter_key: str = '',
                 tracked: bool = False,
                 track_offset: float = 0.5,
                 wrap: int = -1,
                 bullet: bool = False,
                 color: Union[List[int], Tuple[int, ...]] = (-255, 0, 0, 255),
                 show_label: bool = False,
                 **kwargs: Any
                 ) -> Text:
        item = Text(
            default_value=default_value,
            label=label,
            user_data=user_data,
            use_internal_label=use_internal_label,
            tag=tag,
            indent=indent,
            parent=self.identifier,
            before=before,
            source=source,
            payload_type=payload_type,
            drag_callback=drag_callback,
            drop_callback=drop_callback,
            show=show,
            pos=pos,
            filter_key=filter_key,
            tracked=tracked,
            track_offset=track_offset,
            wrap=wrap,
            bullet=bullet,
            color=color,
            show_label=show_label,
            **kwargs
        )
        self.add_item(item)
        return item

    ## ADD BUTTONS

    def add_button(self,
                   *,
                   label: str = None,
                   user_data: Any = None,
                   use_internal_label: bool = True,
                   tag: Union[int, str] = 0,
                   width: int = 0,
                   height: int = 0,
                   indent: int = -1,
                   before: Union[int, str] = 0,
                   payload_type: str = '$$DPG_PAYLOAD',
                   callback: Callable = None, drag_callback: Callable = None,
                   drop_callback: Callable = None,
                   show: bool = True,
                   enabled: bool = True,
                   pos: Union[List[int], Tuple[int, ...]] = [],
                   filter_key: str = '',
                   tracked: bool = False,
                   track_offset: float = 0.5,
                   small: bool = False,
                   arrow: bool = False,
                   direction: int = 0, **kwargs
                   ) -> ButtonText:
        item = ButtonText(label=label,
                          user_data=user_data,
                          use_internal_label=use_internal_label,
                          tag=tag,
                          width=width,
                          height=height,
                          indent=indent,
                          parent=self.identifier,
                          before=before,
                          payload_type=payload_type,
                          callback=callback,
                          drop_callback=drop_callback,
                          show=show,
                          enabled=enabled,
                          pos=pos,
                          filter_key=filter_key,
                          tracked=tracked,
                          track_offset=track_offset,
                          small=small,
                          arrow=arrow,
                          direction=direction,
                          **kwargs
                          )
        self.add_item(item)
        return item

    def add_button_colormap(self,
                            default_value: Union[List[int], Tuple[int, ...]] = (0, 0, 0, 255),
                            *,
                            label: str = None,
                            user_data: Any = None,
                            use_internal_label: bool = True,
                            tag: Union[int, str] = 0,
                            width: int = 0,
                            height: int = 0,
                            indent: int = -1,
                            before: Union[int, str] = 0,
                            payload_type: str = '$$DPG_PAYLOAD',
                            callback: Callable = None,
                            drag_callback: Callable = None,
                            drop_callback: Callable = None,
                            show: bool = True,
                            enabled: bool = True,
                            pos: Union[List[int], Tuple[int, ...]] = [],
                            filter_key: str = '',
                            tracked: bool = False,
                            track_offset: float = 0.5,
                            **kwargs
                            ) -> ButtonColormap:
        item = ButtonColormap(
            default_value=default_value,
            height=height,
            tracked=tracked,
            before=before,
            drop_callback=drop_callback,
            user_data=user_data,
            filter_key=filter_key,
            callback=callback,
            payload_type=payload_type,
            parent=self.identifier,
            indent=indent,
            use_internal_label=use_internal_label,
            track_offset=track_offset,
            enabled=enabled,
            drag_callback=drag_callback,
            label=label,
            pos=pos,
            width=width,
            show=show,
            tag=tag,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_button_color(self,
                         default_value: Union[List[int], Tuple[int, ...]] = (0, 0, 0, 255),
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         width: int = 0,
                         height: int = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         callback: Callable = None,
                         drag_callback: Callable = None,
                         drop_callback: Callable = None,
                         show: bool = True,
                         enabled: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         no_alpha: bool = False,
                         no_border: bool = False,
                         no_drag_drop: bool = False,
                         **kwargs
                         ) -> ButtonColor:
        item = ButtonColor(
            default_value=default_value,
            width=width,
            use_internal_label=use_internal_label,
            tag=tag,
            drag_callback=drag_callback,
            track_offset=track_offset,
            enabled=enabled,
            label=label,
            indent=indent,
            pos=pos,
            user_data=user_data,
            show=show,
            filter_key=filter_key,
            callback=callback,
            payload_type=payload_type,
            parent=self.identifier,
            tracked=tracked,
            before=before,
            height=height,
            drop_callback=drop_callback,
            no_alpha=no_alpha,
            no_border=no_border,
            no_drag_drop=no_drag_drop,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_button_image(self,
                         texture_tag: Union[int, str],
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         width: int = 0,
                         height: int = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         source: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         callback: Callable = None,
                         drag_callback: Callable = None,
                         drop_callback: Callable = None,
                         show: bool = True,
                         enabled: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         frame_padding: int = -1,
                         tint_color: Union[List[float], Tuple[float, ...]] = (255, 255, 255, 255),
                         background_color: Union[List[float], Tuple[float, ...]] = (0, 0, 0, 0),
                         uv_min: Union[List[float], Tuple[float, ...]] = (0.0, 0.0),
                         uv_max: Union[List[float], Tuple[float, ...]] = (1.0, 1.0),
                         **kwargs
                         ) -> ButtonImage:
        item = ButtonImage(
            texture_tag=texture_tag,
            drop_callback=drop_callback,
            height=height,
            tracked=tracked,
            before=before,
            parent=self.identifier,
            payload_type=payload_type,
            filter_key=filter_key,
            callback=callback,
            user_data=user_data,
            indent=indent,
            track_offset=track_offset,
            enabled=enabled,
            drag_callback=drag_callback,
            use_internal_label=use_internal_label,
            width=width,
            label=label,
            pos=pos,
            show=show,
            tag=tag,
            source=source,
            uv_max=uv_max,
            uv_min=uv_min,
            tint_color=tint_color,
            frame_padding=frame_padding,
            background_color=background_color,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_button_radio(self,
                         items: Union[List[str], Tuple[str, ...]] = (),
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         source: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         callback: Callable = None,
                         drag_callback: Callable = None,
                         drop_callback: Callable = None,
                         show: bool = True,
                         enabled: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         default_value: str = '',
                         horizontal: bool = False,
                         **kwargs
                         ):
        item = ButtonRadio(
            items=items,
            source=source,
            use_internal_label=use_internal_label,
            label=label,
            drag_callback=drag_callback,
            tag=tag,
            user_data=user_data,
            callback=callback,
            track_offset=track_offset,
            enabled=enabled,
            filter_key=filter_key,
            payload_type=payload_type,
            indent=indent,
            tracked=tracked,
            parent=self.identifier,
            before=before,
            drop_callback=drop_callback,
            default_value=default_value,
            pos=pos,
            show=show,
            horizontal=horizontal,
            **kwargs
        )
        self.add_item(item)
        return item

    ## ADD INPUTS

    def add_input_text(self,
                       *,
                       label: str = None,
                       user_data: Any = None,
                       use_internal_label: bool = True,
                       tag: Union[int, str] = 0,
                       width: int = 0,
                       height: int = 0,
                       indent: int = -1,
                       before: Union[int, str] = 0,
                       source: Union[int, str] = 0,
                       payload_type: str = '$$DPG_PAYLOAD',
                       callback: Callable = None,
                       drag_callback: Callable = None,
                       drop_callback: Callable = None,
                       show: bool = True,
                       enabled: bool = True,
                       pos: Union[List[int], Tuple[int, ...]] = [],
                       filter_key: str = '', tracked: bool = False,
                       track_offset: float = 0.5, default_value: str = '',
                       hint: str = '',
                       multiline: bool = False,
                       no_spaces: bool = False,
                       uppercase: bool = False,
                       tab_input: bool = False,
                       decimal: bool = False,
                       hexadecimal: bool = False,
                       readonly: bool = False,
                       password: bool = False,
                       scientific: bool = False,
                       on_enter: bool = False,
                       **kwargs
                       ) -> InputFieldText:
        item = InputFieldText(label=label,
                         user_data=user_data,
                         use_internal_label=use_internal_label,
                         tag=tag,
                         width=width,
                         height=height,
                         indent=indent,
                         parent=self.identifier,
                         before=before,
                         source=source,
                         payload_type=payload_type,
                         callback=callback,
                         drag_callback=drag_callback,
                         drop_callback=drop_callback,
                         show=show,
                         enabled=enabled,
                         pos=pos,
                         filter_key=filter_key,
                         tracked=tracked,
                         track_offset=track_offset,
                         default_value=default_value,
                         hint=hint,
                         multiline=multiline,
                         no_spaces=no_spaces,
                         uppercase=uppercase,
                         tab_input=tab_input,
                         decimal=decimal,
                         hexadecimal=hexadecimal,
                         readonly=readonly,
                         password=password,
                         scientific=scientific,
                         on_enter=on_enter,
                         **kwargs
                         )
        self.add_item(item)
        return item

    def add_input_double(self,
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         width: int = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         source: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         callback: Callable = None,
                         drag_callback: Callable = None,
                         drop_callback: Callable = None,
                         show: bool = True,
                         enabled: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         default_value: float = 0.0,
                         format: str = '%.3f',
                         min_value: float = 0.0,
                         max_value: float = 100.0,
                         step: float = 0.1,
                         step_fast: float = 1.0,
                         min_clamped: bool = False,
                         max_clamped: bool = False,
                         on_enter: bool = False,
                         readonly: bool = False,
                         **kwargs
                         ) -> InputFieldDouble:
        item = InputFieldDouble(min_value=min_value,
                                max_value=max_value,
                                format=format,
                                drag_callback=drag_callback,
                                default_value=default_value,
                                source=source,
                                callback=callback,
                                track_offset=track_offset,
                                user_data=user_data,
                                filter_key=filter_key,
                                payload_type=payload_type,
                                drop_callback=drop_callback,
                                use_internal_label=use_internal_label,
                                enabled=enabled,
                                indent=indent,
                                tracked=tracked,
                                before=before,
                                parent=self.identifier,
                                width=width,
                                label=label,
                                tag=tag,
                                pos=pos,
                                show=show,
                                on_enter=on_enter,
                                step_fast=step_fast,
                                readonly=readonly,
                                max_clamped=max_clamped,
                                min_clamped=min_clamped,
                                step=step,
                                **kwargs
                                )
        self.add_item(item)
        return item

    def add_input_double_x(self,
                           *,
                           label: str = None,
                           user_data: Any = None,
                           use_internal_label: bool = True,
                           tag: Union[int, str] = 0,
                           width: int = 0,
                           indent: int = -1,
                           before: Union[int, str] = 0,
                           source: Union[int, str] = 0,
                           payload_type: str = '$$DPG_PAYLOAD',
                           callback: Callable = None,
                           drag_callback: Callable = None,
                           drop_callback: Callable = None,
                           show: bool = True,
                           enabled: bool = True,
                           pos: Union[List[int], Tuple[int, ...]] = [],
                           filter_key: str = '',
                           tracked: bool = False,
                           track_offset: float = 0.5,
                           default_value: Any = (0.0, 0.0, 0.0, 0.0),
                           format: str = '%.3f',
                           min_value: float = 0.0,
                           max_value: float = 100.0,
                           size: int = 4,
                           min_clamped: bool = False,
                           max_clamped: bool = False,
                           on_enter: bool = False,
                           readonly: bool = False,
                           **kwargs
                           ) -> InputFieldDoubleX:
        item = InputFieldDoubleX(
            min_clamped=min_clamped,
            max_clamped=max_clamped,
            readonly=readonly,
            on_enter=on_enter,
            label=label,
            parent=self.identifier,
            show=show,
            tracked=tracked,
            before=before,
            enabled=enabled,
            indent=indent,
            user_data=user_data,
            filter_key=filter_key,
            callback=callback,
            payload_type=payload_type,
            drop_callback=drop_callback,
            use_internal_label=use_internal_label,
            max_value=max_value,
            min_value=min_value,
            track_offset=track_offset,
            source=source,
            format=format,
            default_value=default_value,
            drag_callback=drag_callback,
            width=width,
            pos=pos,
            tag=tag,
            size=size,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_input_float(self,
                        *,
                        label: str = None,
                        user_data: Any = None,
                        use_internal_label: bool = True,
                        tag: Union[int, str] = 0,
                        width: int = 0,
                        indent: int = -1,
                        before: Union[int, str] = 0,
                        source: Union[int, str] = 0,
                        payload_type: str = '$$DPG_PAYLOAD',
                        callback: Callable = None,
                        drag_callback: Callable = None,
                        drop_callback: Callable = None,
                        show: bool = True,
                        enabled: bool = True,
                        pos: Union[List[int], Tuple[int, ...]] = [],
                        filter_key: str = '',
                        tracked: bool = False,
                        track_offset: float = 0.5,
                        default_value: float = 0.0,
                        format: str = '%.3f',
                        min_value: float = 0.0,
                        max_value: float = 100.0,
                        step: float = 0.1,
                        step_fast: float = 1.0,
                        min_clamped: bool = False,
                        max_clamped: bool = False,
                        on_enter: bool = False,
                        readonly: bool = False,
                        **kwargs
                        ) -> InputFieldFloat:
        item = InputFieldFloat(
            drag_callback=drag_callback,
            width=width,
            format=format,
            default_value=default_value,
            track_offset=track_offset,
            source=source,
            pos=pos,
            tag=tag,
            min_value=min_value,
            max_value=max_value,
            callback=callback,
            payload_type=payload_type,
            drop_callback=drop_callback,
            use_internal_label=use_internal_label,
            user_data=user_data,
            filter_key=filter_key,
            enabled=enabled,
            indent=indent,
            on_enter=on_enter,
            tracked=tracked,
            readonly=readonly,
            parent=self.identifier,
            before=before,
            max_clamped=max_clamped,
            min_clamped=min_clamped,
            step_fast=step_fast,
            label=label,
            show=show,
            step=step,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_input_float_x(self,
                          *,
                          label: str = None,
                          user_data: Any = None,
                          use_internal_label: bool = True,
                          tag: Union[int, str] = 0,
                          width: int = 0,
                          indent: int = -1,
                          before: Union[int, str] = 0,
                          source: Union[int, str] = 0,
                          payload_type: str = '$$DPG_PAYLOAD',
                          callback: Callable = None,
                          drag_callback: Callable = None,
                          drop_callback: Callable = None,
                          show: bool = True,
                          enabled: bool = True,
                          pos: Union[List[int], Tuple[int, ...]] = [],
                          filter_key: str = '',
                          tracked: bool = False,
                          track_offset: float = 0.5,
                          default_value: Union[List[float], Tuple[float, ...]] = (0.0, 0.0, 0.0, 0.0),
                          format: str = '%.3f',
                          min_value: float = 0.0,
                          max_value: float = 100.0,
                          size: int = 4,
                          min_clamped: bool = False,
                          max_clamped: bool = False,
                          on_enter: bool = False,
                          readonly: bool = False,
                          **kwargs
                          ):
        item = InputFieldFloatX(
            min_clamped=min_clamped,
            label=label,
            before=before,
            max_clamped=max_clamped,
            parent=self.identifier,
            readonly=readonly,
            on_enter=on_enter,
            tracked=tracked,
            show=show,
            user_data=user_data,
            filter_key=filter_key,
            enabled=enabled,
            indent=indent,
            max_value=max_value,
            min_value=min_value,
            callback=callback,
            payload_type=payload_type,
            drop_callback=drop_callback,
            drag_callback=drag_callback,
            use_internal_label=use_internal_label,
            track_offset=track_offset,
            source=source,
            default_value=default_value,
            format=format,
            width=width,
            tag=tag,
            pos=pos,
            size=size,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_input_int(self,
                      *,
                      label: str = None,
                      user_data: Any = None,
                      use_internal_label: bool = True,
                      tag: Union[int, str] = 0,
                      width: int = 0,
                      indent: int = -1,
                      before: Union[int, str] = 0,
                      source: Union[int, str] = 0,
                      payload_type: str = '$$DPG_PAYLOAD',
                      callback: Callable = None,
                      drag_callback: Callable = None,
                      drop_callback: Callable = None,
                      show: bool = True,
                      enabled: bool = True,
                      pos: Union[List[int], Tuple[int, ...]] = [],
                      filter_key: str = '',
                      tracked: bool = False,
                      track_offset: float = 0.5,
                      default_value: int = 0,
                      min_value: int = 0,
                      max_value: int = 100,
                      step: int = 1,
                      step_fast: int = 100,
                      min_clamped: bool = False,
                      max_clamped: bool = False,
                      on_enter: bool = False,
                      readonly: bool = False,
                      **kwargs
                      ) -> InputFieldInt:
        item = InputFieldInt(
            default_value=default_value,
            use_internal_label=use_internal_label,
            width=width,
            source=source,
            track_offset=track_offset,
            drag_callback=drag_callback,
            tag=tag,
            pos=pos,
            min_value=min_value,
            callback=callback,
            max_value=max_value,
            payload_type=payload_type,
            drop_callback=drop_callback,
            on_enter=on_enter,
            user_data=user_data,
            filter_key=filter_key,
            enabled=enabled,
            indent=indent,
            readonly=readonly,
            before=before,
            tracked=tracked,
            max_clamped=max_clamped,
            parent=self.identifier,
            min_clamped=min_clamped,
            step_fast=step_fast,
            label=label,
            show=show,
            step=step,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_input_int_x(self,
                        *,
                        label: str = None,
                        user_data: Any = None,
                        use_internal_label: bool = True,
                        tag: Union[int, str] = 0,
                        width: int = 0,
                        indent: int = -1,
                        before: Union[int, str] = 0,
                        source: Union[int, str] = 0,
                        payload_type: str = '$$DPG_PAYLOAD',
                        callback: Callable = None,
                        drag_callback: Callable = None,
                        drop_callback: Callable = None,
                        show: bool = True,
                        enabled: bool = True,
                        pos: Union[List[int], Tuple[int, ...]] = [],
                        filter_key: str = '',
                        tracked: bool = False,
                        track_offset: float = 0.5,
                        default_value: Union[List[int], Tuple[int, ...]] = (0, 0, 0, 0),
                        min_value: int = 0,
                        max_value: int = 100,
                        size: int = 4,
                        min_clamped: bool = False,
                        max_clamped: bool = False,
                        on_enter: bool = False,
                        readonly: bool = False,
                        **kwargs
                        ) -> InputFieldIntX:
        item = InputFieldIntX(
            min_clamped=min_clamped,
            label=label,
            tracked=tracked,
            parent=self.identifier,
            max_clamped=max_clamped,
            before=before,
            readonly=readonly,
            indent=indent,
            show=show,
            on_enter=on_enter,
            user_data=user_data,
            filter_key=filter_key,
            enabled=enabled,
            max_value=max_value,
            min_value=min_value,
            callback=callback,
            payload_type=payload_type,
            drop_callback=drop_callback,
            track_offset=track_offset,
            source=source,
            drag_callback=drag_callback,
            default_value=default_value,
            use_internal_label=use_internal_label,
            width=width,
            pos=pos,
            tag=tag,
            size=size,
            **kwargs
        )
        self.add_item(item)
        return item

    ## ADD SLIDERS

    def add_slider_float(self,
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         width: int = 0,
                         height: int = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         source: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         callback: Callable = None,
                         drag_callback: Callable = None,
                         drop_callback: Callable = None,
                         show: bool = True,
                         enabled: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         default_value: float = 0.0,
                         vertical: bool = False,
                         no_input: bool = False,
                         clamped: bool = False,
                         min_value: float = 0.0,
                         max_value: float = 100.0,
                         format: str = '%.3f',
                         **kwargs
                         ) -> SliderFloat:
        item = SliderFloat(label=label,
                           user_data=user_data,
                           use_internal_label=use_internal_label,
                           tag=tag,
                           width=width,
                           height=height,
                           indent=indent,
                           parent=self.identifier,
                           before=before,
                           source=source,
                           payload_type=payload_type,
                           callback=callback,
                           drag_callback=drag_callback,
                           drop_callback=drop_callback,
                           show=show,
                           enabled=enabled,
                           pos=pos,
                           filter_key=filter_key,
                           tracked=tracked,
                           track_offset=track_offset,
                           default_value=default_value,
                           vertical=vertical,
                           no_input=no_input,
                           clamped=clamped,
                           min_value=min_value,
                           max_value=max_value,
                           format=format,
                           **kwargs)
        self.add_item(item)
        return item

    def add_slider_colormap(self,
                            *,
                            label: str = None,
                            user_data: Any = None,
                            use_internal_label: bool = True,
                            tag: Union[int, str] = 0,
                            width: int = 0,
                            height: int = 0,
                            indent: int = -1,
                            before: Union[int, str] = 0,
                            payload_type: str = '$$DPG_PAYLOAD',
                            callback: Callable = None,
                            drop_callback: Callable = None,
                            show: bool = True,
                            pos: Union[List[int], Tuple[int, ...]] = [],
                            filter_key: str = '',
                            tracked: bool = False,
                            track_offset: float = 0.5,
                            default_value: float = 0.0,
                            **kwargs
                            ) -> SliderColormap:
        item = SliderColormap(
            use_internal_label=use_internal_label,
            width=width,
            tag=tag,
            default_value=default_value,
            track_offset=track_offset,
            pos=pos,
            payload_type=payload_type,
            drop_callback=drop_callback,
            callback=callback,
            filter_key=filter_key,
            user_data=user_data,
            indent=indent,
            before=before,
            tracked=tracked,
            parent=self.identifier,
            label=label,
            show=show,
            height=height,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_slider_double(self,
                          *,
                          label: str = None,
                          user_data: Any = None,
                          use_internal_label: bool = True,
                          tag: Union[int, str] = 0,
                          width: int = 0,
                          height: int = 0,
                          indent: int = -1,
                          before: Union[int, str] = 0,
                          source: Union[int, str] = 0,
                          payload_type: str = '$$DPG_PAYLOAD',
                          callback: Callable = None,
                          drag_callback: Callable = None,
                          drop_callback: Callable = None,
                          show: bool = True,
                          enabled: bool = True,
                          pos: Union[List[int], Tuple[int, ...]] = [],
                          filter_key: str = '',
                          tracked: bool = False,
                          track_offset: float = 0.5,
                          default_value: float = 0.0,
                          vertical: bool = False,
                          no_input: bool = False,
                          clamped: bool = False,
                          min_value: float = 0.0,
                          max_value: float = 100.0,
                          format: str = '%.3f',
                          **kwargs
                          ) -> SliderDouble:
        item = SliderDouble(
            height=height,
            tracked=tracked,
            parent=self.identifier,
            label=label,
            before=before,
            user_data=user_data,
            indent=indent,
            filter_key=filter_key,
            callback=callback,
            show=show,
            payload_type=payload_type,
            track_offset=track_offset,
            drop_callback=drop_callback,
            default_value=default_value,
            drag_callback=drag_callback,
            use_internal_label=use_internal_label,
            source=source,
            min_value=min_value,
            max_value=max_value,
            enabled=enabled,
            width=width,
            pos=pos,
            tag=tag,
            format=format,
            no_input=no_input,
            clamped=clamped,
            vertical=vertical,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_slider_double_x(self,
                            *,
                            label: str = None,
                            user_data: Any = None,
                            use_internal_label: bool = True,
                            tag: Union[int, str] = 0,
                            width: int = 0,
                            indent: int = -1,
                            before: Union[int, str] = 0,
                            source: Union[int, str] = 0,
                            payload_type: str = '$$DPG_PAYLOAD',
                            callback: Callable = None,
                            drag_callback: Callable = None,
                            drop_callback: Callable = None,
                            show: bool = True,
                            enabled: bool = True,
                            pos: Union[List[int], Tuple[int, ...]] = [],
                            filter_key: str = '',
                            tracked: bool = False,
                            track_offset: float = 0.5,
                            default_value: Any = (0.0, 0.0, 0.0, 0.0),
                            size: int = 4,
                            no_input: bool = False,
                            clamped: bool = False,
                            min_value: float = 0.0,
                            max_value: float = 100.0,
                            format: str = '%.3f',
                            **kwargs
                            ) -> SliderDoubleX:
        item = SliderDoubleX(
            clamped=clamped,
            no_input=no_input,
            format=format,
            enabled=enabled,
            max_value=max_value,
            min_value=min_value,
            width=width,
            source=source,
            tag=tag,
            track_offset=track_offset,
            drag_callback=drag_callback,
            default_value=default_value,
            use_internal_label=use_internal_label,
            user_data=user_data,
            filter_key=filter_key,
            callback=callback,
            payload_type=payload_type,
            drop_callback=drop_callback,
            tracked=tracked,
            before=before,
            parent=self.identifier,
            indent=indent,
            label=label,
            pos=pos,
            show=show,
            size=size,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_slider_float_x(self,
                           *,
                           label: str = None,
                           user_data: Any = None,
                           use_internal_label: bool = True,
                           tag: Union[int, str] = 0,
                           width: int = 0,
                           indent: int = -1,
                           before: Union[int, str] = 0,
                           source: Union[int, str] = 0,
                           payload_type: str = '$$DPG_PAYLOAD',
                           callback: Callable = None,
                           drag_callback: Callable = None,
                           drop_callback: Callable = None,
                           show: bool = True,
                           enabled: bool = True,
                           pos: Union[List[int], Tuple[int, ...]] = [],
                           filter_key: str = '',
                           tracked: bool = False,
                           track_offset: float = 0.5,
                           default_value: Union[List[float], Tuple[float, ...]] = (0.0, 0.0, 0.0, 0.0),
                           size: int = 4,
                           no_input: bool = False,
                           clamped: bool = False,
                           min_value: float = 0.0,
                           max_value: float = 100.0,
                           format: str = '%.3f',
                           **kwargs
                           ) -> SliderFloatX:
        item = SliderFloatX(
            indent=indent,
            parent=self.identifier,
            label=label,
            before=before,
            tracked=tracked,
            drop_callback=drop_callback,
            pos=pos,
            callback=callback,
            payload_type=payload_type,
            show=show,
            user_data=user_data,
            filter_key=filter_key,
            use_internal_label=use_internal_label,
            min_value=min_value,
            max_value=max_value,
            track_offset=track_offset,
            source=source,
            default_value=default_value,
            drag_callback=drag_callback,
            no_input=no_input,
            enabled=enabled,
            format=format,
            clamped=clamped,
            width=width,
            tag=tag,
            size=size,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_slider_int(self,
                       *,
                       label: str = None,
                       user_data: Any = None,
                       use_internal_label: bool = True,
                       tag: Union[int, str] = 0,
                       width: int = 0,
                       height: int = 0,
                       indent: int = -1,
                       before: Union[int, str] = 0,
                       source: Union[int, str] = 0,
                       payload_type: str = '$$DPG_PAYLOAD',
                       callback: Callable = None,
                       drag_callback: Callable = None,
                       drop_callback: Callable = None,
                       show: bool = True,
                       enabled: bool = True,
                       pos: Union[List[int], Tuple[int, ...]] = [],
                       filter_key: str = '',
                       tracked: bool = False,
                       track_offset: float = 0.5,
                       default_value: int = 0,
                       vertical: bool = False,
                       no_input: bool = False,
                       clamped: bool = False,
                       min_value: int = 0,
                       max_value: int = 100,
                       format: str = '%d',
                       **kwargs
                       ) -> SliderInt:
        item = SliderInt(
            clamped=clamped,
            width=width,
            no_input=no_input,
            format=format,
            enabled=enabled,
            drag_callback=drag_callback,
            tag=tag,
            default_value=default_value,
            max_value=max_value,
            min_value=min_value,
            source=source,
            track_offset=track_offset,
            user_data=user_data,
            filter_key=filter_key,
            callback=callback,
            payload_type=payload_type,
            use_internal_label=use_internal_label,
            indent=indent,
            parent=self.identifier,
            tracked=tracked,
            before=before,
            drop_callback=drop_callback,
            label=label,
            vertical=vertical,
            pos=pos,
            show=show,
            height=height,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_slider_int_x(self,
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         width: int = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         source: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         callback: Callable = None,
                         drag_callback: Callable = None,
                         drop_callback: Callable = None,
                         show: bool = True,
                         enabled: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         default_value: Union[List[int], Tuple[int, ...]] = (0, 0, 0, 0),
                         size: int = 4,
                         no_input: bool = False,
                         clamped: bool = False,
                         min_value: int = 0,
                         max_value: int = 100,
                         format: str = '%d',
                         **kwargs
                         ) -> SliderIntX:
        item = SliderIntX(tracked=tracked,
                          before=before,
                          drop_callback=drop_callback,
                          parent=self.identifier,
                          label=label,
                          user_data=user_data,
                          use_internal_label=use_internal_label,
                          filter_key=filter_key,
                          payload_type=payload_type,
                          track_offset=track_offset,
                          indent=indent,
                          width=width,
                          pos=pos,
                          tag=tag,
                          show=show,
                          enabled=enabled,
                          callback=callback,
                          default_value=default_value,
                          drag_callback=drag_callback,
                          source=source,
                          no_input=no_input,
                          max_value=max_value,
                          min_value=min_value,
                          clamped=clamped,
                          format=format,
                          size=size,
                          **kwargs
                          )
        self.add_item(item)
        return item

    ## ADD OTHER

    def add_group(self,
                  *,
                  label: str = None,
                  user_data: Any = None,
                  use_internal_label: bool = True,
                  tag: Union[int, str] = 0,
                  width: int = 0,
                  indent: int = -1,
                  before: Union[int, str] = 0,
                  payload_type: str = '$$DPG_PAYLOAD',
                  drag_callback: Callable = None,
                  drop_callback: Callable = None,
                  show: bool = True,
                  pos: Union[List[int], Tuple[int, ...]] = [],
                  filter_key: str = '',
                  delay_search: bool = False,
                  tracked: bool = False,
                  track_offset: float = 0.5,
                  horizontal: bool = False,
                  horizontal_spacing: float = -1,
                  xoffset: float = 0.0,
                  **kwargs
                  ):
        from src.items.group import Group
        item = Group(label=label,
                     user_data=user_data,
                     use_internal_label=use_internal_label,
                     tag=tag,
                     width=width,
                     indent=indent,
                     parent=self.identifier,
                     before=before,
                     payload_type=payload_type,
                     drag_callback=drag_callback,
                     drop_callback=drop_callback,
                     show=show,
                     pos=pos,
                     filter_key=filter_key,
                     delay_search=delay_search,
                     tracked=tracked,
                     track_offset=track_offset,
                     horizontal=horizontal,
                     horizontal_spacing=horizontal_spacing,
                     xoffset=xoffset,
                     **kwargs
                     )
        self.add_item(item)
        return item

    def add_separator(self,
                      *,
                      label: str = None,
                      user_data: Any = None,
                      use_internal_label: bool = True,
                      tag: Union[int, str] = 0,
                      indent: int = -1,
                      before: Union[int, str] = 0,
                      show: bool = True,
                      pos: Union[List[int], Tuple[int, ...]] = [],
                      **kwargs
                      ) -> Separator:
        item = Separator(label=label,
                         user_data=user_data,
                         use_internal_label=use_internal_label,
                         tag=tag,
                         indent=indent,
                         parent=self.identifier,
                         before=before,
                         show=show,
                         pos=pos,
                         **kwargs
                         )
        self.add_item(item)
        return item

    def add_slider_3d(self,
                      *,
                      label: str = None,
                      user_data: Any = None,
                      use_internal_label: bool = True,
                      tag: Union[int, str] = 0,
                      width: int = 0,
                      height: int = 0,
                      indent: int = -1,
                      before: Union[int, str] = 0,
                      source: Union[int, str] = 0,
                      payload_type: str = '$$DPG_PAYLOAD',
                      callback: Callable = None,
                      drag_callback: Callable = None,
                      drop_callback: Callable = None,
                      show: bool = True,
                      pos: Union[List[int], Tuple[int, ...]] = [],
                      filter_key: str = '',
                      tracked: bool = False,
                      track_offset: float = 0.5,
                      default_value: Union[List[float], Tuple[float, ...]] = (0.0, 0.0, 0.0, 0.0),
                      max_x: float = 100.0,
                      max_y: float = 100.0,
                      max_z: float = 100.0,
                      min_x: float = 0.0,
                      min_y: float = 0.0,
                      min_z: float = 0.0,
                      scale: float = 1.0,
                      **kwargs
                      ) -> Slider3D:
        item = Slider3D(label=label,
                        user_data=user_data,
                        parent=self.identifier,
                        height=height,
                        width=width,
                        scale=scale,
                        default_value=default_value,
                        use_internal_label=use_internal_label,
                        show=show,
                        tag=tag,
                        pos=pos,
                        callback=callback,
                        filter_key=filter_key,
                        payload_type=payload_type,
                        track_offset=track_offset,
                        drag_callback=drag_callback,
                        drop_callback=drop_callback,
                        indent=indent,
                        tracked=tracked,
                        before=before,
                        source=source,
                        max_x=max_x,
                        max_y=max_y,
                        max_z=max_z,
                        min_x=min_x,
                        min_y=min_y,
                        min_z=min_z,
                        **kwargs
                        )
        self.add_item(item)
        return item

    def add_checkbox(self,
                     *,
                     label: str = None,
                     user_data: Any = None,
                     use_internal_label: bool = True,
                     tag: Union[int, str] = 0,
                     indent: int = -1,
                     before: Union[int, str] = 0,
                     source: Union[int, str] = 0,
                     payload_type: str = '$$DPG_PAYLOAD',
                     callback: Callable = None,
                     drag_callback: Callable = None,
                     drop_callback: Callable = None,
                     show: bool = True,
                     enabled: bool = True,
                     pos: Union[List[int], Tuple[int, ...]] = [],
                     filter_key: str = '',
                     tracked: bool = False,
                     track_offset: float = 0.5,
                     default_value: bool = False,
                     **kwargs
                     ) -> Checkbox:
        item = Checkbox(source=source,
                        tracked=tracked,
                        before=before,
                        drop_callback=drop_callback,
                        filter_key=filter_key,
                        callback=callback,
                        drag_callback=drag_callback,
                        track_offset=track_offset,
                        payload_type=payload_type,
                        default_value=default_value,
                        use_internal_label=use_internal_label,
                        indent=indent,
                        user_data=user_data,
                        parent=self.identifier,
                        label=label,
                        pos=pos,
                        tag=tag,
                        show=show,
                        enabled=enabled,
                        **kwargs
                        )
        self.add_item(item)
        return item

    def add_date_picker(self,
                        *,
                        label: str = None,
                        user_data: Any = None,
                        use_internal_label: bool = True,
                        tag: Union[int, str] = 0,
                        indent: int = -1,
                        before: Union[int, str] = 0,
                        payload_type: str = '$$DPG_PAYLOAD',
                        callback: Callable = None,
                        drag_callback: Callable = None,
                        drop_callback: Callable = None,
                        show: bool = True,
                        pos: Union[List[int], Tuple[int, ...]] = [],
                        filter_key: str = '',
                        tracked: bool = False,
                        track_offset: float = 0.5,
                        default_value: dict = {'month_day': 14, 'year': 20, 'month': 5},
                        level: int = 0,
                        **kwargs
                        ) -> DatePicker:
        item = DatePicker(
            default_value=default_value,
            drop_callback=drop_callback,
            filter_key=filter_key,
            payload_type=payload_type,
            before=before,
            tracked=tracked,
            parent=self.identifier,
            user_data=user_data,
            callback=callback,
            track_offset=track_offset,
            indent=indent,
            drag_callback=drag_callback,
            use_internal_label=use_internal_label,
            label=label,
            pos=pos,
            show=show,
            tag=tag,
            level=level,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_image(self,
                  texture_tag: Union[int, str],
                  *,
                  label: str = None,
                  user_data: Any = None,
                  use_internal_label: bool = True,
                  tag: Union[int, str] = 0,
                  width: int = 0,
                  height: int = 0,
                  indent: int = -1,
                  before: Union[int, str] = 0,
                  source: Union[int, str] = 0,
                  payload_type: str = '$$DPG_PAYLOAD',
                  drag_callback: Callable = None,
                  drop_callback: Callable = None,
                  show: bool = True,
                  pos: Union[List[int], Tuple[int, ...]] = [],
                  filter_key: str = '',
                  tracked: bool = False,
                  track_offset: float = 0.5,
                  tint_color: Union[List[float], Tuple[float, ...]] = (255, 255, 255, 255),
                  border_color: Union[List[float], Tuple[float, ...]] = (0, 0, 0, 0),
                  uv_min: Union[List[float], Tuple[float, ...]] = (0.0, 0.0),
                  uv_max: Union[List[float], Tuple[float, ...]] = (1.0, 1.0),
                  **kwargs
                  ) -> Image:
        item = Image(
            tag=tag,
            use_internal_label=use_internal_label,
            indent=indent,
            drag_callback=drag_callback,
            track_offset=track_offset,
            label=label,
            pos=pos,
            user_data=user_data,
            show=show,
            filter_key=filter_key,
            parent=self.identifier,
            tracked=tracked,
            before=before,
            payload_type=payload_type,
            drop_callback=drop_callback,
            source=source,
            tint_color=tint_color,
            uv_min=uv_min,
            uv_max=uv_max,
            height=height,
            width=width,
            texture_tag=texture_tag,
            border_color=border_color,
            **kwargs
        )
        self.add_item(item)
        return item

    def add_child_window(self,
                         *,
                         label: str = None,
                         user_data: Any = None,
                         use_internal_label: bool = True,
                         tag: Union[int, str] = 0,
                         width: int = 0,
                         height: int = 0,
                         indent: int = -1,
                         before: Union[int, str] = 0,
                         payload_type: str = '$$DPG_PAYLOAD',
                         drop_callback: Callable = None,
                         show: bool = True,
                         pos: Union[List[int], Tuple[int, ...]] = [],
                         filter_key: str = '',
                         delay_search: bool = False,
                         tracked: bool = False,
                         track_offset: float = 0.5,
                         border: bool = True,
                         autosize_x: bool = False,
                         autosize_y: bool = False,
                         no_scrollbar: bool = False,
                         horizontal_scrollbar: bool = False,
                         menubar: bool = False,
                         **kwargs
                         ):
        from src.items.child_window import ChildWindow
        item = ChildWindow(track_offset=track_offset,
                           payload_type=payload_type,
                           filter_key=filter_key,
                           user_data=user_data,
                           use_internal_label=use_internal_label,
                           height=height,
                           indent=indent,
                           menubar=menubar,
                           width=width,
                           delay_search=delay_search,
                           no_scrollbar=no_scrollbar,
                           horizontal_scrollbar=horizontal_scrollbar,
                           show=show,
                           parent=self.identifier,
                           tag=tag,
                           label=label,
                           pos=pos,
                           drop_callback=drop_callback,
                           tracked=tracked,
                           before=before,
                           border=border,
                           autosize_x=autosize_x,
                           autosize_y=autosize_y,
                           **kwargs
                           )
        self.add_item(item)
        return item
